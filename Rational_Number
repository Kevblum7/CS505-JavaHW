// Kevin Blum
// Rational Number project
// Creates class rational that creates 2 rational number as ratio of two integers
// contains methods for arithmetic of the rational numbers +,-,*,/


public class Main {
	
	 public static void main(String[] args) {

	        Rational a = new Rational(2, 4);
	        Rational b = new Rational(2, 6);

	        System.out.println(a + " + " + b + " = " + a.add(b));
	        System.out.println(a + " - " + b + " = " + a.sub(b));
	        System.out.println(a + " * " + b + " = " + a.mul(b));
	        System.out.println(a + " / " + b + " = " + a.div(b));

	        System.out.println(a + " = " + a + " is " + a.equals(new Rational(1, 2)));
	        System.out.println(a + " = " + b + " is " + a.equals(new Rational(1, 3)));

	        Rational[] arr = {new Rational(7, 1), new Rational(6, 1),
	                          new Rational(5, 1), new Rational(4, 1),
	                          new Rational(3, 1), new Rational(2, 1),
	                          new Rational(1, 1), new Rational(1, 2),
	                          new Rational(1, 3), new Rational(1, 4),
	                          new Rational(1, 5), new Rational(1, 6),
	                          new Rational(1, 7), new Rational(1, 8),
	                          new Rational(1, 9), new Rational(0, 1)};

	        selectSort(arr);

	        for (Rational r : arr) {
	            System.out.println(r);
	        }

	        Number n = new Rational(3, 2);

	        System.out.println(n.doubleValue());
	        System.out.println(n.floatValue());
	        System.out.println(n.intValue());
	        System.out.println(n.longValue());
	        
	       double x = Math.random() * 101;
	       System.out.println(x);
	       
	        
	        
	       
	        
	    }

	    public static <T extends Comparable<? super T>> void selectSort(T[] array) {

	        T temp;
	        int mini;

	        for (int i = 0; i < array.length - 1; ++i) {

	            mini = i;

	            for (int j = i + 1; j < array.length; ++j) {
		            if (array[j].compareTo(array[mini]) < 0) {
		                mini = j;
		            }
	            }

	            if (i != mini) {
		            temp = array[i];
		            array[i] = array[mini];
		            array[mini] = temp;
	            }
	        }
	    }
	}
  
  class Rational extends Number implements Comparable<Rational> {
	
	public Rational(int num, int denom) {    // constructor 
											 // rational number is ratio of two integers
		
		//this.num = num;
		//this.denom = denom;
		int gg = gcd(num,denom);			// gcd to always display in lowest terms
		this.num = num/gg;
		this.denom = denom/gg;
		//num = num1/gg;
		//denom = denom1/gg;
	}
	
	

	public Rational add(Rational o) {       // addition
		
		int fnum;
		int G;
		
		if(denom == o.denom) 
		{
			return new Rational(num + o.num, denom + o.denom);
		}
		else
		{
			int x = lcm(o);                               // add uses lcm for addition of fractions
			int newnum = num * (x/denom);
			int newnum1 = o.num * (x/o.denom);
			fnum = (newnum + newnum1);
			G = gcd(fnum, x);                             // call gcd to simplify fraction
			fnum = fnum / G;
			x = x / G;
			return new Rational(fnum, x);
		}
		
	}
	public int lcm(Rational o) {           // finding least common multiple for add and sub 
										   // returns least common multiple of denominator
		int L;
		int bigger;
		int smaller;
		int d1 = Math.abs(denom);
		int d2 = Math.abs(o.denom);
		
		if (d1 > d2) 
		{ 
			bigger = d1;
			smaller = d2;
		}
		else if (d1 < d2)
		{
			bigger = d1;
			smaller = d2;
		}
		else
		{
			L = denom;
			return L;
		}
		L = bigger;
		
		while (L % smaller !=0)
		{
			L = L + bigger;
		}
		
		
		return L;
	}
	
	public Rational sub(Rational o) {              // subtraction
		
		int subnum;
		int G;
		
		if(denom == o.denom) 
		{
			return new Rational(num + o.num, denom + o.denom);
		}
		else
		{  
			int y = lcm(o);                      // lcm needed for subtraction of fractions
			int newnum = num * (y/denom);   
			int newnum1 = o.num * (y/o.denom);      
			subnum = (newnum - newnum1);
			G = gcd(subnum, y);                  // gcd to simplify fractions
			subnum = subnum / G;
			y= y / G;
			
			return new Rational(subnum, y);
		}
		
	}
	
	public Rational mul(Rational o) {                    //  multiplication
														 // creates num and denom
												         // gcd simplifies fraction
		int top = num * o.num;
		int bot = o.denom * denom;
		int G = gcd(top,bot);
		top = top/G;
		bot = bot / G;
		return new Rational(top, bot);
	}
	
	public Rational div(Rational o) {                    // divison
		 												 // creates num and denom
		int top = num * o.denom;                         // gcd simplifies fraction
		int bot = o.num * denom;
		int G = gcd(top,bot);   
		top = top/G;
		bot = bot / G;
		return new Rational(top, bot);
	}
	
	private int gcd(int p, int z) {               // gcd needed to simplify fractions
	 
		p = Math.abs(p);
		z = Math.abs(z);
		
		if(p == 0) 
		{
			return 1;
		}
		
		while (p != z)
		{
			if (p > z)
			{
				p = p - z;
			}
			else
			{
				z = z - p;
			}
		}
		
		return z;
	}
	
	


	public int compareTo(Rational o) {			// Implementing compareTo from Comparable
		
		float to1 = num;
		float de1 = denom;
		float to2 = o.num;
		float de2 = o.denom;
		
		float curr = to1/de1;
		float plus1 = to2/de2;
		
		if(curr == plus1) {
			return 0;
			
		}
		else if(curr > plus1)
		{
			return 1;
		}
		else
		{
			return -1;
		}
		
		
		
	}

	
	public int intValue() {				// override method from Number and return int data type of fraction
		
		int iV = num / denom;
		
		return iV;
	}

	
	public long longValue() {			// override method from Number and return Long data type of fraction
		
		long nl = num;
		long dl = denom;
		long lV = nl / dl;
		
		return lV;
	}

	
	public float floatValue() {				// override method from Number and return float data type of fraction
		
		float nf = num;
		float df = denom;
		float fV = nf/df;
		
		return fV;
	}


	public double doubleValue() {				// override method from Number and return double data type of fraction
		
		double nd = num;
		double dd= denom;
		double dV = nd/dd;
		
		return dV;
	}
	
	public String equals(Rational o){				// equals to return True if rational numbers are equal
													// false otherwise
		int g1 = gcd(num, denom);
		int g2 = gcd(o.num, o.denom);
		int t1 = num/g1;
		int d1 = denom/g1;
		int t2 = o.num/g2;
		int d2 = o.denom/g2;
		
		if(t1 == t2 && d1 == d2)
		{
			return ("True");
		}
		else
		{
			return ("False");
		}
		
		
		
	}
	
	
	
	public String toString() {       // write rational number to a string

		
		return ((num * denom < 0? "-" : "") +  "(" + Math.abs(num) + " / " + Math.abs(denom) + ")");

		// If you wanted to depict the rational number as the numerator and denominator
		// their corresponding signs you can use the return statement below instead
		// I figured the statement above was better to avoid writing a negative sign in
		// both the numerator and denominator which is just a positive number
		
		// return ("(" + num + " / " + denom + ")");

		
	}
	
	public int num;
	public int denom;
	

}

// Kevin Blum
//
// ID: 31542988
// Modified (Recursive) Sorted List


import java.util.Iterator;
import java.util.Random;

public class Main {
	
	// Main Driver
	// Added search function in there to test

    public static <E> void main(String[] args) {

        Random rand = new Random(1);
        SortedList<Integer> list = new SortedList<Integer>();
        int n = args.length == 1 ? Integer.parseInt(args[0]) : 10;

        System.out.println("insert");

        for (int i = 0; i < n; ++i) {
            int m = rand.nextInt(n);
            list.insert(m);
            System.out.print(m + ": ");
            for (Integer j : list) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
        
        System.out.println();
        
        int k = 4;
        int g = 9;
        
        System.out.println(list.search(k));
        System.out.println(list.search(g));
        
        System.out.println();
       
        
        

       System.out.println("remove");

        Integer m;

        rand = new Random(1);

        for (int i = 0; i < n; ++i) {
            list.remove(m = rand.nextInt(n));
            System.out.print(m + ": ");
            for (Integer j : list) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
        
    }
}

interface List<E> extends Iterable<E> {
    void insert(E data);
    void remove(E key);
    E retrieve(int index);
    boolean search(E key);
}

abstract class AbstractList<E> implements List<E> {

    protected class Node<T> {

        protected Node(T data) {
            this.data = data;
        }

        protected T data;
        protected Node<T> next;
    }

    protected Node<E> head;
}

// Sorted List Class containing insert, remove, search, retrieve empty

class SortedList<E extends Comparable<? super E>> extends AbstractList<E> {
	
	// Public calling insert method
	public void insert(E data) {
    	 Node temp = new Node(data);
         head = insert(head, temp);
    	
    }
	// Private insert method
	// base case of empty list
	// searching for spot between two nodes
	// If it does not go before any node then added to end of node
    private Node<E> insert(Node<E> curr, Node<E> node){
    	
    	if(curr == null )
    	{
    		return node;
    	}
    	else if(curr.next == null)
    	{
    		if( node.data.compareTo(curr.data) > 0)
    		{
    			curr.next = node;
    			
        		return curr;
    		}
    		node.next = curr;
    		return node;
    	}
    	else if(curr.next != null)
		{
    		if( (node.data.compareTo(curr.data) > 0 && node.data.compareTo(curr.next.data) < 0 ) || node.data.compareTo(curr.next.data) == 0)
    		{	
    			Node value = curr;
				node.next = curr.next;
				curr.next = node;
				node = value;
				return node;
    			
    		}
    		else
    		{
    			node.next = curr;
    			return node;
    		}
    		
			
		}
    	else if( node.data.compareTo(curr.data) < 0)
    	{
    		node.next = curr;
    		return node;
    	}
    	
    	
    	else
    	{

    		return insert(curr.next, node);
    	}
    	
    }
    	
	
      
   // Public method remove, calls private recursive remove
    
    public void remove(E key) 
    {
        head = remove(head, key);
    }
    
    // remove finds node that needs to be removed and takes it out of list
    // when finds the node it takes previous nodes pointer and points it to the next node, essentially bypassing it
    
    private Node<E> remove(Node<E> curr, E key) {
        if(curr.next != null) 
        {
        	if(key.compareTo(curr.next.data) == 0)
        	{	
        		
        		curr.next = curr.next.next;
        		return head;
        	}
        	else
        	{
        		return remove(curr.next, key);
        	}
        }
        
        else
        {
        	return null;
        }
       
        
    }
    
    
// Inner iterator class given to us
    public Iterator<E> iterator() {

        return new Iterator<E>() {
            public boolean hasNext() {
                return curr != null;
            }
            public E next() {
                E temp = curr.data;
                curr = curr.next;
                return temp;
            }
            public void remove() {
                throw new UnsupportedOperationException();
            }
            private Node<E> curr = head;
        };
    }

    // Public and Private retrieve given to us in notes

    public E retrieve(int index) {

        return retrieve(index, head);

    }
    private E retrieve(int index, Node<E> curr) {
        if (curr == null) {
            return null;
        }
        else if (index == 0) {
            return (E) curr.data;
        }
        return retrieve(index-1, curr.next);
    }
    
   // public search method returns a boolean value
    public boolean search(E key) {
        return search(head, key);
    }
    
   // private search called by public search returns a boolean value
   // if continues to find a key value
   // if value found it 
    private boolean search(Node<E> curr, E key) {
    	
    	if(curr == null)
    	{
    		return false;
    	}
    	else if(key.compareTo(curr.data) != 0)
    	{
    		return search(curr.next,key);
    	}
    	else
    	{
    		
    		return true;
    	}
    	
        
    }
   


}

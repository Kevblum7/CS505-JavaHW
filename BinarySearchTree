/*  Kevin Blum 
//  Student ID: 31542988
//  Section  852
// 
//  Binary Search Tree
//  Insert, Remove, Search - Recursively
*/

import java.util.Random;
import java.util.Iterator;

//  main driver file. (from your video)
public class Main{
	
	public static void main (String[] args) {
		BinaryTree<Integer> tree = new BinarySearchTree<Integer>();
		Random rand;
		int num = args.length == 1 ? Integer.parseInt(args[0]) : 1;
		long start, stop;
		
		rand = new Random(1);
		System.out.print("insert: ");
		start = System.currentTimeMillis();
		for(int i = 0; i < num; ++i) {
			int z = rand.nextInt(num);
			tree.insert(z);
			//System.out.println(z);
			
		}
		stop = System.currentTimeMillis();
		System.out.println(stop - start);
		
		rand = new Random(1);
		System.out.print("remove: ");
		start = System.currentTimeMillis();
		for(int i = 0; i < num; ++i) {
			int n = rand.nextInt(num);
			//System.out.println(n);
			if(!tree.search(n)) {
				System.out.println("fail");
				System.exit(0);
			}
			tree.remove(n);
		}
		stop = System.currentTimeMillis();
		System.out.println(stop - start);
		System.out.println(tree.root == null);
		
		
		
	}	

}
interface Tree<E> extends Iterable<E> {
	
    void insert(E data);
    void remove(E key);
    boolean search(E key);
}

/*
 *
 *  BinaryTree.java
 *
 */

abstract class BinaryTree<E> implements Tree<E> {

    protected class Node<T> {
        protected Node(T data) {
            this.data = data;
        }
        protected T data;
        protected Node<T> left;
        protected Node<T> right;
    }

    protected Node<E> root;
}

/*
 *
 *  BinarySearchTree.java
 *
 */



class BinarySearchTree<E extends Comparable<? super E>> extends BinaryTree<E> {

	/* recursive insert */
    public void insert(E data) {
    	Node<E> temp = new Node<E>(data);
        root = insert(root, temp);
    }
    private Node<E> insert(Node<E> curr, Node<E> node) {
    	int cmp;
    	// empty tree insert node
    	if(curr == null)
    	{
    		return node;
    	}
    	cmp = node.data.compareTo(curr.data);
    	/* insert value less than curr vale. move left */
    	if(cmp <= 0)
    	{
    		curr.left = insert(curr.left, node);
    	}
    	// move right if insert value is greater
    	else if(cmp > 0)
    	{
    		curr.right = insert(curr.right, node);
    	}
    	return curr;
		
    }
  
    private Node<E> findIOP(Node<E> node) {

        Node<E> curr;

        for (curr = node.left; curr.right != null; curr = curr.right);

        return curr;
    }

    public Iterator<E> iterator() {
        return null;
    }

    // recursive remove
    public void remove(E key) {
        root = remove(root, key);
    }

    private Node <E> remove(Node <E> curr, E key)
    {
    	
    	if(curr == null) {
    		return curr;
    	}
    	/* three cases leaf , one chill , two children */
    	int cmp = key.compareTo(curr.data);
    	if(cmp == 0)
    	{
    		// no children 
    		if(curr.left == null && curr.right == null)
    		{
    			return null;
    		}
    		// one child either right or left
    		if(curr.right == null) 
    		{
    			return curr.left;
    		}
    		if(curr.left == null)
    		{
    			return curr.right;
    		}
    		
    	}
    	if(cmp < 0) {
    		curr.right= remove(curr.right, key);
    		return curr;
    	} 	
    	// IOP always left of value
    	curr.left = remove(curr.left, key);
    	return curr;
    	
    }
  /* recursive search */
    public boolean search(E key) {
        return search(root, key);
    }
   private boolean search(Node <E> curr, E key)
    {
	   	// not in tree
    	if(curr == null ) 
    	{
    		return false;
    	}
    	int cmp = key.compareTo(curr.data);
    	// found 
    	if( cmp == 0)
    	{
    		return true;
    	}
    	/* pending on if key is bigger or smaller than curr go left or right */
    	
    	return cmp < 0 ? search(curr.left, key) : search(curr.right, key);
    	
    }
   
}
